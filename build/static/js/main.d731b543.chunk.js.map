{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/quotesReducer.js","redux/reducers/dealsReducer.js","redux/reducers/quotesTableReducer.js","redux/reducers/providerReducer.js","redux/reducers/employeesReducer.js","redux/reducers/typesReducer.js","redux/reducers/columnsReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/quotesSaga.js","redux/sagas/dealsSaga.js","redux/sagas/adminSaga.js","redux/sagas/quotesTableSaga.js","redux/sagas/providerSaga.js","redux/sagas/employeesSaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/Footer/Footer.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/Admin/RegisteredUsersTable.js","components/Admin/ProviderBrokerRegisterPage.js","components/Admin/AdminDashboard.js","components/Broker/AddClient.js","components/Broker/SendToProvider.js","components/Broker/ClientTable.js","components/Broker/QuoteTable.js","components/Broker/BrokerDashboard.js","firebase/config.js","components/Employer/FileUpload.js","components/Employer/EmployerDashboard.js","components/Employer/ColumnDropdown.js","components/Employer/EmployeeDataTable.js","components/Provider/UploadQuoteButton.js","components/Provider/CustomizedTable.js","components/Provider/ProviderDashboard.js","components/AboutPage/AboutPage.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","employerQuotesReducer","providerQuotesReducer","dealsReducer","quotesTableReducer","providerReducer","employeesReducer","types","columnsReducer","i","concat","Object","toConsumableArray","rootReducer","errors","user","deals","quotesReducer","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","console","log","put","headers","Content-Type","withCredentials","axios","post","t0","response","status","stop","_marked","this","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","getQuotesSaga","fetchQuotesSaga","updateQuoteSaga","addQuoteSaga","quotesSaga","call","deal_id","quotesSaga_marked","quotesSaga_marked2","quote_id","quotesSaga_marked3","_context4","Quote","_marked4","_context5","takeEvery","_marked5","getDealId","getCsvUrl","updateCsvUrl","getDeals","dealsSaga","dealsSaga_marked","dealsSaga_marked2","dealsSaga_marked3","reqId","dealsSaga_marked4","dealsSaga_marked5","getTypesSaga","adminSaga","adminSaga_marked","adminSaga_marked2","getQuotesTableSaga","quotesTableSaga","quotesTableSaga_marked","quotesTableSaga_marked2","fetchProvidersSaga","providersSaga","providerSaga_marked","providerSaga_marked2","extractEmployeeData","getEmployeeData","employeesSaga","employeesSaga_marked","employeesSaga_marked2","employeesSaga_marked3","rootSaga","all","providerSaga","sagas_marked","connect","props","react_default","createElement","className","onClick","dispatch","Link","to","user_id","Fragment","username","components_LogOutButton_LogOutButton","Footer","LoginPage","password","login","event","preventDefault","_this","handleInputChangeFor","propertyName","setState","defineProperty","target","value","classes","Paper_default","root","elevation","role","onSubmit","InputLabel_default","htmlFor","index_es","label","name","onChange","Component","withStyles","theme","objectSpread","mixins","gutters","marginTop","spacing","unit","marginBottom","marginRight","marginLeft","paddingTop","paddingBottom","RegisterPage","_this2","ComponentToShow","ComponentToProtect","component","ComponentToProtect2","component2","ComponentToProtect3","component3","ComponentToProtect4","component4","otherProps","objectWithoutProperties","authorization_id","Route","assign","RegisteredUsersTable","table","Table_default","TableHead_default","TableRow_default","TableCell_default","header","userList","map","row","key","company_name","reduxState","containers","display","justifyContent","width","margin","&:nth-of-type(odd)","backgroundColor","palette","background","default","fontSize","ProviderBrokerRegisterPage","getUsers","then","catch","error","alert","anchorEl","selected","getAuthorization","handleClick","currentTarget","handleClose","innerText","handleEmailSend","e","method","url","msg","swal","_this3","Button_default","variant","color","aria-owns","aria-haspopup","Menu_default","id","open","Boolean","onClose","authorization","MenuItem_default","type_of_company","Admin_RegisteredUsersTable","overflowX","createMuiTheme","primary","main","secondary","AdminDashboard","core_styles","Admin_ProviderBrokerRegisterPage","AddClient","broker_id","company_id","getClients","clearInputs","align","newState","confirmBtn","sendBtn","providerObj","SendToProvider","setProviders","theProviderObj","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","provider","err","return","handleOpenClick","handleCloseClick","handleChange","postQuote","providerObjectArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","deal","push","confirmUpdate","values","includes","title","icon","buttons","willConfrim","checkBoxes","providerObjKeys","keys","FormControlLabel_default","control","Checkbox_default","checked","customBtn","disabled","backgroundGreen","alignCenter","backgroundGray","Dialog_default","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","FormGroup_default","FormControl_default","inlineBlock","DialogActions_default","portfolioReducer","sizeImg","height","float","fontWeight","ClientTable","componentDidMount","date","TableBody_default","scope","Broker_SendToProvider","moment","date_email_sent_to_employer","format","Broker_AddClient","minWidth","QuoteTable","getQuotes","employer_name","provider_name","decision_complete","CheckCircle_default","NotInterested_default","TabContainer","Typography_default","style","padding","children","LinkTab","Tab_default","BrokerDashboard","NoSsr_default","AppBar_default","position","Tabs_default","fullWidth","href","Broker_ClientTable","Broker_QuoteTable","flexGrow","paper","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","storage","csvFile","csv_url","disableButton","FileUpload","selectImage","files","targetCsv","uploadCsv","ref","on","snapshot","thisProgess","Math","round","bytesTransferred","totalBytes","progress","complete","child","getDownloadURL","thisUrl","result","updateUrl","history","csvButton","accept","dialogCancelBtn","withRouter","textWeight","textTransform","dialogConfirmBtn","EmployerDashboard","tableHeadInsert","tableBodyInsert","quote","Feedback_default","provider_response_message","window","provider_response_file_location","Archive_default","AccessTime_default","tableFormat","Employer_FileUpload","textAlign","maxWidth","ColumnDropdown","index","renderFunction","formControl","Select_default","native","input","FilledInput_default","flexWrap","selectEmpty","EmployeeDataTable","confirmColumns","indexesToRemove","empReducer","array","splice","newCsvBody","arrayToString","finalColumnsString","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","category","finalColumnsString2","slice","blobObject","Blob","preTableInsert","tableBodyInsert1","tableBodyInsert2","confirmButton","columnsArr","column","Employer_ColumnDropdown","columnRowLength","employee","columnPage","columns","file","file_url","message","UploadQuoteButton","targetFile","uploadFile","fileButton","Send_default","employer","rows","placeholder","theme2","CustomTableCell","head","common","white","body","TableCell","button","broker","CloudDownload_default","Provider_UploadQuoteButton","ProviderDashboard","fetchQuotes","Provider_CustomizedTable","AboutPage","res","App","HashRouter","components_Nav_Nav","Switch","Redirect","exact","from","path","components_ProtectedRoute_ProtectedRoute","render","components_Footer_Footer","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","ReactDOM","react_redux_es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.d731b543.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","import {combineReducers} from 'redux';\n\n// used to store quotes associated with their account for the employer that is logged in to view\nconst employerQuotesReducer = (state = [], action) => {\n   switch (action.type) {\n     case 'QUOTES':\n       return action.payload;\n     default:\n       return state;\n   }\n };\n\n// Used to store quotes associated with their account for the provider that is logged in to view\nconst providerQuotesReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_QUOTES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default combineReducers({\n    employerQuotesReducer,\n    providerQuotesReducer,\n});\n","const dealsReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_DEALS':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nexport default dealsReducer;","const quotesTableReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_QUOTES':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nexport default quotesTableReducer;","import {combineReducers} from 'redux';\n\n// Used to store quotes\nconst providerReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_PROVIDERS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n  \nexport default combineReducers({\n    providerReducer,\n});\n","const employeesReducer = (state = [], action) => {\n   switch (action.type) {\n      case 'EMPLOYEE_DATA':\n         return action.payload\n      default:\n         return state;\n   }\n};\n\nexport default employeesReducer;","const types = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_AUTHORIZATION_TYPES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n\nexport default types;","// This reducer stores the employer's selected dropdown menu values that they choose during the csv file sorting process.\nconst columnsReducer = (state = [], action) => {\n    switch (action.type) {\n      case 'SET_COLUMNS':\n         if(state.length === 0){\n            for(let i = 0; i < action.payload; i++){\n               state = [...state, 'choose']\n            }\n            return state\n         }   \n         else {\n            state[action.payload[0]] = action.payload[1]\n            return state\n         }\n      default:\n         return state;\n    }\n };\n \n export default columnsReducer;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport quotesReducer from './quotesReducer';\nimport deals from './dealsReducer';\nimport quotesTableReducer from './quotesTableReducer';\nimport providerReducer from './providerReducer';\nimport employeesReducer from './employeesReducer';\nimport types from './typesReducer';\nimport columnsReducer from './columnsReducer';\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  types, \n  deals, //gets deals for broker clients table\n  quotesTableReducer, // gets quotes table info\n  quotesReducer, // fetches and stores the quotes\n  providerReducer,\n  employeesReducer,\n  columnsReducer, // stores the table columns and their titles\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  console.log('dispatch: LOGIN, function: loginUser, file: loginSaga', 'action.payload: ', action.payload);\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  console.log('dispatch: LOGOUT, function: logoutUser, file: loginSaga');\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  console.log('dispatch: REGISTER, function: registerUser, file: registrationSaga', 'action.payload: ', action.payload);\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    // yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  console.log('dispatch: FETCH_USER, function: fetchUser, file: userSaga', 'action.payload: NONE');\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","// Vendors\nimport { put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// Saga that GETs the Quotes from the server for the Employer\nfunction* getQuotesSaga(action) {\n    console.log('dispatch: GET_QUOTES, function: getQuotesSaga, file: quotesSaga', 'action.payload: ', action.payload);\n   try {\n      const response = yield call(axios.get, `/api/company_id/${action.payload}`);\n      yield put({type: 'QUOTES', payload: response.data});  \n   }\n   catch (error) {\n       console.log(`GET request to /api/quotes/${action.payload.deal_id} UNSUCCESSFUL...`);\n   }\n}\n \n// Saga that GETs the Quotes from the server for the Provider\nfunction* fetchQuotesSaga(action) {\n    console.log('dispatch: FETCH_QUOTES, function: fetchQuotesSaga, file: quotesSaga', 'action.payload: ', action.payload);\n    try {\n        const response = yield call( axios.get, '/api/quotes' );\n        yield put( { type: 'SET_QUOTES', payload: response.data } );\n    }\n    catch (error) {\n        console.log('Error with quotes DB GET request:', error);\n    }\n}\n\n// Updated the quote when the Provider responds with a either a quote or rejection\nfunction* updateQuoteSaga(action) {\n    console.log('dispatch: UPDATE_QUOTE_URL, function: updateQuoteSaga, file: quotesSaga', 'action.payload: ', action.payload);\n    try {\n       yield call(axios.put, `/api/quotes/${action.payload.quote_id}`, action.payload);\n       yield put({type: 'FETCH_QUOTES'});\n    }\n    catch (error) {\n        console.log(`PUT request to /api/quotes/${action.payload.quote_id} error:`, error);\n    }\n }\n \n // Saga that performs a POST request to add a Quote to the database\nfunction* addQuoteSaga(action) { \n    console.log('Add-quote-to-database.  dispatch: POST_QUOTE, function: updateQuoteSaga, file: addQuoteSaga', 'action.payload: ', action.payload);\n    try {\n        yield call( axios.post, '/api/quotes', action.payload);\n        yield put( { type: 'FETCH_QUOTES' } );\n        console.log(`${action.payload.Quote} successfully added to the Database.`);\n    } \n    catch (error) {\n        console.log('Error with Quote POST request:', error);\n    }\n}\n\n// Listener generator function\nfunction* quotesSaga() {\n  yield takeEvery('FETCH_QUOTES', fetchQuotesSaga);\n  yield takeEvery('GET_QUOTES', getQuotesSaga);\n  yield takeEvery('UPDATE_QUOTE_URL', updateQuoteSaga);\n  yield takeEvery('POST_QUOTE', addQuoteSaga);\n}\n\nexport default quotesSaga;\n","import axios from 'axios';\nimport { put, call, takeLatest } from 'redux-saga/effects';\n\nfunction* getDealId(action) {\n   try {\n      const response = yield call(axios.get, `/api/company_id/deals/${action.payload}`);\n      yield put({type: 'SET_DEALS', payload: response.data});  \n   }\n   catch (error) {\n       console.log(`GET request to /api/company_id/deals/${action.payload.deal_id} UNSUCCESSFUL...`);\n   }\n}\n\nfunction* getCsvUrl(action) {\n   try {\n      const response = yield call(axios.get, `/api/deals/csv/${action.payload}`);\n      console.log('RESPONSE.DATA: ', response.data)\n      yield put({type: 'SET_DEALS', payload: response.data});  \n   }\n   catch (error) {\n       console.log(`GET request to /api/deals/csv/${action.payload.deal_id} UNSUCCESSFUL...`);\n   }\n}\n\nfunction* updateCsvUrl(action) {\n  console.log('Send CSV url to typesReducer??  dispatch: UPDATE_CSV_URL, function: updateCsvUrl, file: dealsSaga', 'action.payload: ', action.payload);\n   try {\n      const response = yield call(axios.put, `/api/deals/${action.payload.deal_id}`, action.payload);\n      console.log('put, type: QUOTES, currently disabled')\n      // yield put({type: 'QUOTES', payload: response.data});  \n   }\n   catch (error) {\n       console.log(`GET request to /api/deals/${action.payload.deal_id} UNSUCCESSFUL...`);\n   }\n}\n\nfunction* getDeals(action) {\n  console.log('Get deals from server for dealsReducer.  dispatch: FETCH_CLIENTS, function: getDeals, file: dealsSaga', 'action.payload: ', action.payload);\n   const reqId = action.payload;\n   try {\n     const config = {\n       headers: { 'Content-Type': 'application/json' },\n       withCredentials: true,\n     };\n     const response = yield axios.get(`api/deals/clienttable/${reqId}`, config);\n     yield put({ type: 'SET_DEALS', payload: response.data });\n   } \n   catch (error) {\n     console.log('Deals get request failed', error);\n   }\n }\n\nfunction* dealsSaga() {\n   yield takeLatest('GET_DEAL_ID', getDealId);\n   yield takeLatest('GET_CSV_URL', getCsvUrl);\n   yield takeLatest('UPDATE_CSV_URL', updateCsvUrl); \n   yield takeLatest('FETCH_CLIENTS', getDeals);\n }\n \n export default dealsSaga;","import { put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// saga to get authorization types from server\nfunction* getTypesSaga(action) {\n    console.log('Get authorization types from server for typesReducer.  dispatch: GET_AUTHORIZATION, function: getTypesSaga, file: adminSaga', 'action.payload: ', action.payload);\n    try {\n        const response = yield call(axios.get, '/types', {\n            types: action.payload\n        });\n        yield put({\n            type: 'SET_AUTHORIZATION_TYPES',\n            payload: response.data\n        });\n    } catch (error) {\n        console.log('error with get request', error);\n    }\n}\n\nfunction* adminSaga() {\n    yield takeLatest('GET_AUTHORIZATION', getTypesSaga);\n}\n\nexport default adminSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\nfunction* getQuotesTableSaga(action) {\n  console.log('dispatch: GET_QUOTES_TABLE, function: getQuotesTableSaga, file: quotesTableSaga', 'action.payload: ', action.payload);\n   const reqId = action.payload;\n   try {\n     const config = {\n       headers: { 'Content-Type': 'application/json' },\n       withCredentials: true,\n     };\n     const response = yield axios.get(`api/quotes/quotestable/${reqId}`, config);\n     yield put({ type: 'SET_QUOTES', payload: response.data });\n   } \n   catch (error) {\n     console.log('Quotes get request failed', error);\n   }\n }\n\nfunction* quotesTableSaga() {\n   yield takeLatest('GET_QUOTES_TABLE', getQuotesTableSaga);\n   \n }\n \n export default quotesTableSaga;","import { put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* fetchProvidersSaga(action) {\n    console.log('Get providers from server for providerReducer.   dispatch: FETCH_PROVIDERS, function: fetchProvidersSaga, file: providerSaga', 'action.payload: ', action.payload);\n    try {\n        const response = yield call( axios.get, '/api/quotes/providers' );\n        console.log(\"in fetchProviderSaga, response.data: \", response.data)\n        yield put( { type: 'SET_PROVIDERS', payload: response.data } );\n    }\n    catch (error) {\n        console.log('Error with Providers DB GET request:', error);\n    }\n}\n\nfunction* providersSaga() {\n    yield takeEvery('FETCH_PROVIDERS', fetchProvidersSaga);\n  }\n  \n  export default providersSaga;","import { put, takeEvery, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* extractEmployeeData(action) {\n   console.log('Inside extractEmployeeData, company_id:', action.payload);\n   \n   try {\n      const response = yield call( axios.get, `/api/employees/extract/${action.payload}` );\n      console.log(\"In extractEmployeeData, response.data: \", response.data)\n      yield put( { type: 'EMPLOYEE_DATA', payload: response.data } );\n   }\n   catch (error) {\n      console.log('Error in extractEmployeeData:', error);\n   }\n}\n\nfunction* getEmployeeData(action) {\n   try {\n      const response = yield call( axios.get, `/api/employees/fetch` );\n      console.log(\"In getEmployeeData, response.data: \", response.data)\n      yield put( { type: 'EMPLOYEE_DATA', payload: response.data } );\n   }\n   catch (error) {\n      console.log('Error in getEmployeeData:', error);\n   }\n}\n\nfunction* employeesSaga() {\n   yield takeEvery('EXTRACT_EMPLOYEE_DATA', extractEmployeeData);\n   yield takeEvery('GET_EMPLOYEE_DATA', getEmployeeData);\n}\n  \nexport default employeesSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport quotesSaga from './quotesSaga';\nimport dealsSaga from './dealsSaga';\nimport adminSaga from './adminSaga'\nimport quotesTableSaga from './quotesTableSaga';\nimport providerSaga from './providerSaga';\nimport employeesSaga from './employeesSaga'\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    quotesSaga(),\n    dealsSaga(),\n    adminSaga(),\n    quotesTableSaga(),\n    providerSaga(),\n    employeesSaga()\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/home\">\n      <h2 className=\"nav-title\">Quotesify</h2>\n    </Link>\n    <div className=\"nav-right\">\n      { /* Show the link to the logout button if the user is logged in and display a welcome message as well as the user's username*/ }\n      {props.user.user_id && (\n        <>\n          <h5 className=\"welcome\">Welcome, {props.user.username}</h5>\n\n          <LogOutButton className=\"nav-link\"/>    \n        </>\n      )}\n      {/* Always show this link since the about page is not protected */}\n        <Link className=\"nav-link\" to=\"/home\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {props.user.user_id ? 'Home' : 'Login / Register'}\n      </Link>\n      <Link className=\"nav-link\" to=\"/about\">\n        About\n      </Link>\n    \n    </div>\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links \n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user }) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React from 'react';\nimport './Footer.css'\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    &copy; Quotesify\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// Styles\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  TextField\n} from '@material-ui/core';\nimport {\n  withStyles\n} from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    marginTop: theme.spacing.unit * 10,\n    marginBottom: theme.spacing.unit * 10,\n    marginRight: theme.spacing.unit * 60,\n    marginLeft: theme.spacing.unit * 60,\n    \n    paddingTop: theme.spacing.unit * 10,\n    paddingBottom: theme.spacing.unit * 10,\n  },\n});\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Paper className={classes.root} elevation={15}>\n      <div>\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n            <InputLabel htmlFor = \"Email\"> </InputLabel>\n              \n              <TextField\n                type=\"text\"\n                label=\"Email\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n           \n          </div>\n          <div>\n            < InputLabel htmlFor = \"password\" >   </InputLabel>\n             \n              < TextField\n                label=\"Password\"\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n         \n          </div>\n          <div>\n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n          </div>\n        </form>\n      </div>\n      </Paper>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nLoginPage.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(connect(mapStateToProps)(LoginPage));\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    // the component the admin sees when they log in\n    component: ComponentToProtect,\n    // the component the provider sees when they log in\n    component2: ComponentToProtect2,\n    // the component the broker sees when they log in\n    component3: ComponentToProtect3,\n    // the component the empolyer sees when they log in\n    component4: ComponentToProtect4,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n   // only show routes to corresponding authorization_id\n   // component Admin sees when they log in\n  if (user.user_id && user.authorization_id === 1) {\n     // if the user is logged in (only logged in users have ids)\n     // show the component that is protected\n     ComponentToShow = ComponentToProtect;\n  // component Provider sees when they log in\n  } else if (user.user_id && user.authorization_id === 2) {\n     // if the user is logged in (only logged in users have ids)\n     // show the component that is protected\n     ComponentToShow = ComponentToProtect2;\n  // component Broker sees when they log in\n  } else if (user.user_id && user.authorization_id === 3) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect3;\n    // component Employer sees when they log in\n  } else if (user.user_id && user.authorization_id === 4) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect4;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell';\nimport Table from '@material-ui/core/Table'\nimport TableHead from '@material-ui/core/TableHead'\nimport Paper from '@material-ui/core/Paper'\nimport { withStyles } from '@material-ui/core';\n\n\nconst styles = theme => ({\n    containers: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    table: {\n        width: 750,\n        marginTop: 40,\n        margin: 'auto',\n    },\n    row: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.background.default,\n        },\n    },\n    header: {\n        fontSize: 18,\n\n    }\n})\n\nclass RegisteredUsersTable extends Component {\n\n  render() {\n    // material ui\n    const {classes} = this.props\n\n    return (\n      <div>\n         <h1>Registered Users</h1>\n        <Paper className={classes.table} >\n        <Table >\n          <TableHead>\n            <TableRow >\n              <TableCell className={classes.header}>Username</TableCell>\n              <TableCell className={classes.header}>Company Name</TableCell>\n            </TableRow>\n          </TableHead>\n        {this.props.userList.map( user => {\n          return(\n            <TableRow className={classes.row} key={user.company_name} >\n            <TableCell>{user.username}</TableCell>\n            <TableCell>{user.company_name}</TableCell>\n            </TableRow>\n          )\n        })}\n        </Table>\n        </Paper>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapreduxStateToProps = reduxState => ({\n    reduxState\n});\n\nexport default connect(mapreduxStateToProps)(withStyles(styles)(RegisteredUsersTable));","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { TextField } from '@material-ui/core';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport RegisteredUsersTable from './RegisteredUsersTable';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  //styling for create new user\n  root: {\n    marginTop: theme.spacing.unit * 3,\n    marginLeft: '30%',\n    marginRight: '30%',\n    overflowX: 'auto',\n  },\n  //styling for user table\n  table: {\n    marginTop: theme.spacing.unit * 7,\n    marginLeft: '20%',\n    marginRight: '20%',\n    overflowX: 'auto',\n  },\n});\n\nclass ProviderBrokerRegisterPage extends Component {\n\n  // run as soon as possible \n  componentDidMount() {\n    //get authorization types\n    this.getAuthorization();\n    // get users for table \n    this.getUsers();\n\n  }\n\n  // get users created by admin\n   getUsers = () => {\n     axios.get('/users').then(response => {\n        this.setState({\n        userList: response.data\n      })\n     }).catch(error => {\n       alert('Error making/ users GET request', error);\n     })\n   }\n\n  state = {\n    authorization_id: 0,\n    company_name: '',\n    username: '',\n    password: '',\n    // controls menu\n    anchorEl: null,\n    selected: '',\n    name: this.props.reduxState.user.name,\n    userList: []\n  };\n\n    // sends email information to nodemailer reducer\n    handleEmailSend(e) {\n      axios({\n        method: \"POST\",\n        url: \"/send\",\n        data: {\n        // email broker, provider, or admin their login information\n        // email sent to the email provided as the username email\n            name: this.state.name,\n            username: this.state.username,\n            password: this.state.password\n        }\n      }).then((response) => {\n        if (response.data.msg === 'success') {\n          swal(\"Great job!\", \"Registration Successful!! Email Sent!!\", \"success\");\n            // get users after adding them\n            this.getUsers();\n        } else if (response.data.msg === 'fail') {\n          swal(\"WARNING!\", \"Email failed to send.\", \"warning\");\n        }\n      })\n    }\n\n  // getProject dispatches a call to get authorization authorization level names and ids\n  getAuthorization = (event) => {\n    // dispatch to adminSaga\n    this.props.dispatch({type: 'GET_AUTHORIZATION'});\n  }\n\n   // controls menu\n  handleClick = event => {\n    this.setState({ anchorEl: event.currentTarget });\n  };\n\n  // controls and captures menu selection\n  handleClose = (event) => {\n    // menu item text\n    console.log(\"handleClose event.target.value: \", event.target.value);\n    this.setState({ authorization_id: event.target.value,\n    selected: event.target.innerText\n    });\n    // menu control \n    this.setState({ anchorEl: null });\n  };\n  \n  // registration \n  registerUser = (event) => {\n    event.preventDefault();\n    console.log('entered registerUser', this.state)\n    if (this.state.authorization_id && this.state.company_name && this.state.username && this.state.password) {\n\n      // dispatch to registrationSaga\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          authorization_id: this.state.authorization_id,\n          company_name: this.state.company_name,\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n         // send email with login info to broker, provider, or admin\n         this.handleEmailSend();\n    }  else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n         // clear input feilds \n         this.setState({\n           authorization_id: 0,\n           company_name: '',\n           username: '',\n           password: '',\n           selected: ''\n         });\n  } \n\n  // captures textFeild input and sets it in state\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    // controls menu\n    const { anchorEl } = this.state; \n    // class for paper\n    const { classes } = this.props;\n    return (\n      <div>\n        {/* paper to put create new user on a card */}\n        <Paper className={classes.root} elevation={15}>\n        <h1>Register Users</h1>\n      <div>\n        <form onSubmit={this.registerUser}>\n            <div>\n          </div>\n          <div>\n            \n          <Button\n            variant=\"raised\"\n            color = \"primary\"\n            className = \"link-button\"\n            aria-owns={anchorEl ? 'simple-menu' : undefined}\n            aria-haspopup=\"true\"\n            onClick={this.handleClick}>\n            {/* The following three lines decide the text of the button options */}\n            {this.state.authorization_id === 0 && \"Select User Type\"}\n            {this.state.authorization_id === undefined && \"Select User Type\"}\n            {this.state.authorization_id != undefined && this.state.selected}\n          </Button>\n         \n          <Menu\n              id=\"simple-menu\"\n              anchorEl={anchorEl}\n              open={Boolean(anchorEl)}\n              onClose={this.handleClose}\n              >\n               {this.props.reduxState.types.map( authorization =>\n          <MenuItem \n              key={authorization.authorization_id}\n              value={authorization.authorization_id} \n              name={authorization.type_of_company} \n              onClick={this.handleClose}>\n              {authorization.type_of_company}\n          </MenuItem>\n            )}\n          </Menu>\n          </div>\n          \n          <div>\n            <InputLabel htmlFor=\"company_name\"></InputLabel>\n              <TextField\n                id=\"company_name-input\"\n                label = \"Company Name\"\n                type=\"text\"\n                name=\"company_name\"\n                value={this.state.company_name}\n                onChange={this.handleInputChangeFor('company_name')}\n              />\n          </div>\n          <div>\n            <InputLabel htmlFor=\"email\"></InputLabel>\n              <TextField\n                id=\"email-input\"\n                label = \"Email\"\n                type=\"text\"\n                name=\"email\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n          </div>\n          <div>\n            < InputLabel htmlFor = \"password\"></InputLabel> \n              <TextField\n                id=\"password-input\"\n                label = \"Password\"\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n          </div>\n                {/* only render input button when an authorization is selected */}\n              {  this.state.authorization_id != undefined && this.state.authorization_id != 0 &&\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n              }\n        </form>\n      </div>\n      </Paper>\n      {/* paper to put user list on a card */}\n      <Paper className={classes.table} elevation={15}>\n        {/* userList gets passed to RegisteredUsersTable */}\n        <RegisteredUsersTable userList = {this.state.userList}/>\n      </Paper>\n      </div>\n    );\n  }\n}\n\nconst mapreduxStateToProps = reduxState => ({\n  reduxState,\n});\n\nexport default withStyles(styles)(connect(mapreduxStateToProps)(ProviderBrokerRegisterPage));\n\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport ProviderBrokerRegisterPage from './ProviderBrokerRegisterPage';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#1a3d50',\n    },\n    secondary: {\n      main: '#efbf42',\n    },\n  },\n});\n\nclass AdminDashboard extends Component {\n\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n      <div>\n      <ProviderBrokerRegisterPage/>\n      </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(AdminDashboard);\n\n\n","// Vendors\nimport React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport axios from 'axios';\nimport swal from 'sweetalert';\n// Styles\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { TextField } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  root: {\n    width: '30%',\n    margin: '35%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n});\n\nclass AddClient extends Component {\n\n  state = {\n    authorization_id: 2,\n    company_name: '',\n    username: '',\n    password: '',\n    name: this.props.reduxState.user.name,\n    broker_id: this.props.reduxState.user.company_id,\n  };\n\n  // sends email information to nodemailer reducer\n  handleEmailSend(e){\n    axios({\n      method: 'POST', \n      url: '/send', \n      data: {\n        // email Employer their login information along with broker company name who registered them\n        // the email is sent to the username email provided\n        name: this.state.name,\n        username: this.state.username,\n        password: this.state.password\n      }\n    }).then((response)=>{\n      if (response.data.msg === 'success'){\n        swal(\"Great job!\", \"Registration Successful!! Email Sent!!\", \"success\");\n        this.clearInputs();\n        this.getClients();\n      }\n      else if(response.data.msg === 'fail'){\n        swal(\"WARNING!\", \"Email failed to send.\", \"warning\");\n      }\n    })\n  }\n\n  // registration for Employer\n  registerUser = (event) => {\n    event.preventDefault();\n    if (this.state.company_name === '' || this.state.username === '' || this.state.password === ''){\n      swal(\"WARNING!\", \"You must fill out every field in the form.\", \"warning\");\n    }\n    else{\n      // console.log('Fields are filled (should be) dispatching to register...');\n      // dispatch to registrationSaga\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          authorization_id: this.state.authorization_id,\n          company_name: this.state.company_name,\n          username: this.state.username,\n          password: this.state.password,\n          broker_id: this.props.reduxState.user.company_id\n        },\n      });\n      // send Employer an email with their login information \n      this.handleEmailSend();     \n    }\n  }\n\n    //gets client information from database\n    getClients = () => {\n      this.props.dispatch({\n        type: 'FETCH_CLIENTS',\n        payload: this.props.reduxState.user.company_id\n      });\n    }\n\n  // clear input feilds\n  clearInputs = () =>{\n    this.setState({\n      authorization_id: 2,\n      company_name: '',\n      username: '',\n      password: '',\n      user_id: this.props.reduxState.user.user_id\n    });\n  }\n\n  // captures textFeild input and sets it in state\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <Paper className={classes.root} elevation={15}>\n        <div align=\"center\">\n        <h1>Add a New Employer</h1>\n        </div>\n        <form onSubmit={this.registerUser}>\n          <div>\n            <InputLabel htmlFor=\"company_name\"></InputLabel>\n              <TextField\n                id=\"company_name-input\"\n                label = \"Company Name\"\n                type=\"text\"\n                name=\"company_name\"\n                value={this.state.company_name}\n                onChange={this.handleInputChangeFor('company_name')}\n              />\n          </div>\n          <div>\n            <InputLabel htmlFor=\"email\"></InputLabel>\n              <TextField\n                id=\"email-input\"\n                label = \"Email\"\n                type=\"text\"\n                name=\"email\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n          </div>\n          <div>\n            <InputLabel htmlFor = \"password\"></InputLabel> \n              <TextField\n                id=\"password-input\"\n                label = \"Password\"\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n          </div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n        </form>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nconst mapreduxStateToProps = reduxState => ({\n  reduxState,\n});\n\nexport default withStyles(styles)(connect(mapreduxStateToProps)(AddClient));\n\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport swal from 'sweetalert';\n\n\nconst styling = theme => ({\n   sizeImg: {\n      height: 280,\n      width: 200\n   },\n   inlineBlock:{\n      float: 'left',\n   },\n   customBtn: {\n      height: 10,\n      width: 80,\n      fontWeight: 'bold',\n      fontSize: 10,\n      color: 'white'\n   },\n   backgroundGray: {\n      background: 'dimgray'\n   },\n   backgroundGreen: {\n      background: 'forestgreen'\n   },\n   sendBtn: {\n      width: 100,\n      background: 'royalblue'\n   },\n})\n\nconst newState = {\n   open: false,\n   confirmBtn: false,\n   sendBtn: false,\n   providerObj: {},\n   \n}\n\nclass SendToProvider extends Component {\n\n   state = newState;\n  \n   componentDidMount(){\n      this.setProviders();\n      //  this.props.dispatch( { type: 'FETCH_PROVIDERS' } );\n   }\n\n   //function to populate this component's state with all of the providers\n   setProviders = () => {\n      let theProviderObj = {};\n       for(let provider of this.props.providerReducer.providerReducer){\n         console.log(\"provider in for loop: \", provider);\n          theProviderObj[provider.name] = null;\n       }\n       console.log(theProviderObj)\n       this.setState({\n          providerObj: theProviderObj\n       })\n   }\n   \n   handleOpenClick = () => {\n      this.setState({open: true});\n   };\n  \n   handleCloseClick = () => {\n      this.setState({open: false, confirmBtn: false});\n   };\n   \n   handleChange = (event) => {\n      if (this.state.providerObj[event.target.name] === null){\n         this.setState({\n            confirmBtn: true,\n            providerObj: {\n               ...this.state.providerObj,\n               [event.target.name]: event.target.value\n            },\n         });\n      }\n      else {\n         this.setState({\n            confirmBtn: true,\n            providerObj: {\n               ...this.state.providerObj,\n               [event.target.name]: null\n            },\n         });\n      }\n   }\n\n   postQuote = () => {\n      let providerObjectArray = [];\n      for( let provider of this.props.providerReducer.providerReducer) {\n         console.log(\"this.state.providerObj[name]: \", this.state.providerObj[provider.name])\n         if (this.state.providerObj[provider.name] === \"sendTo\") {\n            console.log(\"name equaled sendTo\");\n            console.log(\"PROPS\", this.props);\n            console.log(\"this.props.deal.deal_id: \", this.props.deal.deal_id)\n            provider.deal_id = this.props.deal.deal_id;\n            \n            providerObjectArray.push(provider);\n         }\n      }  //  End for loop\n      console.log(\"providerObjectArray: \", providerObjectArray)\n      this.props.dispatch({type: \"POST_QUOTE\", payload: providerObjectArray })\n   } //  end postQuote\n\n   confirmUpdate = () => {\n      let providerObjValues = Object.values(this.state.providerObj)\n      if(providerObjValues.includes(\"sendTo\") === false){\n         swal(\"WAIT!\", \"Please select at least 1 provider\", \"warning\")\n      }\n      else {\n         swal({\n            title: \"Are these the correct providers?\",\n            icon: \"info\",\n            buttons: [ \"No\", \"Yes\"]\n            })\n         .then((willConfrim)=>{\n            if(willConfrim){\n               this.postQuote();\n               swal(\"Successfully sent!\", {icon: \"success\"});\n               this.setState({open: false, confirmBtn: false});\n            }\n            else {\n               swal(\"Double check your selections\")\n            }\n         });\n      }\n   }\n\n   render(){\n      \n      const {classes} = this.props;\n      let checkBoxes; // will be used in the JSX\n      console.log(this.state);\n      \n      //loop through theProviderObj in state to get it's keys, a.k.a the provider names\n      if (this.state.providerObj){\n         let providerObjKeys = Object.keys(this.state.providerObj)\n         console.log (providerObjKeys);\n         checkBoxes = providerObjKeys.map( provider => <div>\n           <FormControlLabel\n               control={<Checkbox checked={this.state.providerObj.provider} onChange={this.handleChange} value=\"sendTo\" />}\n               label={provider}\n               name={provider}\n            /> </div>\n         )\n      }\n      // Conditional rendering to keep the \"Add Card\" button disabled until the form is completed\n      let confirmBtn = this.state.confirmBtn === false ?\n      <Button variant=\"contained\" className={classes.customBtn} disabled>Confirm</Button>\n      : <Button onClick={this.confirmUpdate} variant=\"contained\"  className={`${classes.customBtn} ${classes.backgroundGreen}`}>Confirm</Button>\n      \n      return(\n         <section>\n            <div className={classes.alignCenter}>\n               <Button onClick={this.handleOpenClick} className={ `${classes.customBtn} ${classes.backgroundGray}`} variant=\"contained\">Select</Button>\n            </div>\n            <Dialog\n               open={this.state.open}\n               onClose={this.handleCloseClick}\n               aria-labelledby=\"dialog-title\"\n            >\n               <DialogTitle id=\"dialog-title\">Send to Providers</DialogTitle>\n               <DialogContent>\n                  <DialogContentText>Which providers would you like to send this client's data to?</DialogContentText>\n                     <FormGroup>\n                        <FormControl >\n                           <div className={classes.inlineBlock}>\n                              {checkBoxes}\n                           </div>\n                        </FormControl>\n                     </FormGroup>\n               </DialogContent>\n               <DialogActions>\n                  {confirmBtn}\n                  <Button onClick={this.handleCloseClick} className={`${classes.customBtn} ${classes.backgroundGray}`} >Cancel</Button>\n               </DialogActions>\n            </Dialog>\n         </section>\n      );\n   }\n}\n\n/* {this.props.portfolioReducer.map( (card) => (\n               <div>\n                  <img src={card.image_url}/>\n               </div>\n            ))} */\n\nconst mapStateToProps = state => ({\n   portfolioReducer: state.portfolioReducer,\n   user: state.user,\n   providerReducer: state.providerReducer\n   //communityReducer: state.communityReducer\n});\n\nexport default connect(mapStateToProps)(withStyles(styling)(SendToProvider));","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport moment from 'moment';\nimport SendToProvider from './SendToProvider';\nimport AddClient from './AddClient';\n\n//styles for table\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n});\n\nclass ClientTable extends Component {\n\n  componentDidMount = () => {\n    this.getClients();\n  }\n\n  //gets client information from database\n  getClients = () => {\n    this.props.dispatch( { type: 'FETCH_CLIENTS', payload: this.props.reduxState.user.company_id } );\n    //this.props.dispatch( { type: 'FETCH_PROVIDERS' } );\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <Paper className={classes.root} elevation={15}>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>Employer</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Send to Provider</TableCell>\n                <TableCell date>Date Employer Added</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {/* maps through information pulled from database to make table */}\n              {this.props.reduxState.deals.map(row => {\n                return (\n                  <TableRow key={row.id}>\n                    <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                    </TableCell>\n                    <TableCell>{row.status}</TableCell>\n                    <TableCell><SendToProvider deal={row}/></TableCell>\n                    {/* <TableCell><button>Send To Provider</button></TableCell> */}\n                    <TableCell>{moment(row.date_email_sent_to_employer).format('MMMM Do YYYY')}</TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Paper>\n        <AddClient AddClient= {this.AddClient}/>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = reduxState => ({\n  reduxState\n});\n\nClientTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(connect(mapStateToProps)(ClientTable));","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport CheckCircle from '@material-ui/icons/CheckCircle';\nimport NotInterested from '@material-ui/icons/NotInterested';\nimport moment from 'moment';\n\n//styling for tables\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n});\n\n//functional styling for icons\nfunction statusMath(status) {\n  if (status === true) {\n      return(\n          <CheckCircle />\n      )\n  }\n  else{\n      return(\n          <NotInterested />\n      )\n  }    \n}\n\nclass QuoteTable extends Component {\n  componentDidMount = () => {\n    this.getQuotes();\n  }\n\n  //gets quotes from the database\n  getQuotes = () => {\n    this.props.dispatch( { type: 'GET_QUOTES_TABLE', payload: this.props.reduxState.user.company_id} );\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <Paper className={classes.root} elevation={15}>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>Employer</TableCell>\n                <TableCell>Provider</TableCell>\n                <TableCell date>Date Sent</TableCell>\n                <TableCell>Provider Decision</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {/* gets quote table data from database to make table */}\n              {this.props.reduxState.quotesTableReducer.map(row => {\n                return (\n                  <TableRow key={row.id}>\n                    <TableCell component=\"th\" scope=\"row\">\n                    {row.employer_name}\n                    </TableCell>\n                    <TableCell>{row.provider_name}</TableCell>\n                    <TableCell>{moment(row.date_email_sent_to_employer).format('MMMM Do YYYY')}</TableCell>\n                    <TableCell>{statusMath(row.decision_complete)}</TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Paper>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = reduxState => ({\n  reduxState\n});\n\nQuoteTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(connect(mapStateToProps)(QuoteTable));","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport AddClient from './AddClient';\n\n//import client and quotes table to be used in material ui tabs below\nimport ClientTable from './ClientTable';\nimport QuoteTable from './QuoteTable';\n\n//  This was test code to test the post that creates a new quote\nimport axios from 'axios';\nimport { call } from 'redux-saga/effects';\n\n//runs the tabs below\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n}\n//runs the tabs below\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n//runs the tabs below\n\nfunction LinkTab(props) {\n  return <Tab component=\"a\" onClick={event => event.preventDefault()} {...props} />;\n}\n\n//styling for tabs\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    padding: 50,\n  },\n});\n\n//adds colors to tabs\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n        main: '#1a3d50',\n      },\n    secondary: {\n      main: '#efbf42',\n    },\n  },\n});\n\nclass BrokerDashboard extends Component {\n    state = {\n      value: 0,\n    };\n\n    // This was test code to test the post that creates a new quote\n    componentDidMount = () => {\n      this.props.dispatch( { type: 'FETCH_PROVIDERS' } );\n\n    };\n\n    handleChange = (event, value) => {\n      this.setState({ value });\n    };\n\n    render() {\n      const { classes } = this.props;\n      const { value } = this.state;\n      \n    return (\n      // applies theme to whole component\n      <MuiThemeProvider theme={theme}>\n        <NoSsr>\n          {/* controls tabs and where each tabs go and which \n          tab pulls information from imported component */}\n          <div className={classes.root}>\n            <AppBar position=\"static\">\n              <Tabs fullWidth value={value} onChange={this.handleChange}>\n                <LinkTab label=\"Employers\" href=\"page1\" />\n                <LinkTab label=\"Quotes\" href=\"page2\" />\n              </Tabs>\n            </AppBar>\n            {value === 0 && <TabContainer><ClientTable/></TabContainer>}\n            {value === 1 && <TabContainer><QuoteTable/></TabContainer>}\n          </div>\n        </NoSsr>\n      </MuiThemeProvider>\n    );\n  }\n}\n\n\nconst mapStateToProps = reduxState => {\n  return reduxState\n};\n\nBrokerDashboard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(connect(mapStateToProps)(BrokerDashboard));","import firebase from 'firebase/app';\nimport 'firebase/storage';\n\n// Initialize Firebase\nvar config = {\n    apiKey: \"AIzaSyA1CEbnYCvo_HIgE8tmeuTXqMisfhdkQEY\",\n    authDomain: \"quotesify-421ca.firebaseapp.com\",\n    databaseURL: \"https://quotesify-421ca.firebaseio.com\",\n    projectId: \"quotesify-421ca\",\n    storageBucket: \"quotesify-421ca.appspot.com\",\n    messagingSenderId: \"677878174342\"\n  };\n \n firebase.initializeApp(config);\n const storage = firebase.storage();\n export {\n    storage, firebase as default\n }\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {storage} from '../../firebase/config';\nimport { withStyles } from '@material-ui/core';\nimport {withRouter} from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport swal from 'sweetalert';\n\nconst styling = theme => ({\n   csvButton: {\n      background: 'royalblue',\n      color: 'white',\n      textWeight: 'bold',\n      textTransform: 'uppercase'\n   },\n   dialogCancelBtn: {\n      background: 'firebrick',\n      color: 'white',\n      textWeight: 'bold',\n      textTransform: 'uppercase',\n      fontSize: 12\n   },\n   dialogConfirmBtn: {\n      background: 'green',\n      color: 'white',\n      textWeight: 'bold',\n      textTransform: 'uppercase',\n      fontSize: 12\n   }\n})\n\nconst newState = {\n   deal_id: null,\n   csvFile: null,\n   csv_url: null,\n   open: false,\n   disableButton: true\n}\n\nclass FileUpload extends Component {\n\n   state = newState;\n\n   handleOpenClick = () => {\n      this.setState({\n         open: true,\n         deal_id: this.props.deal_id.deal_id //the first 'deal_id' is the name of the parent component prop\n      });\n   };\n  \n   handleCloseClick = () => {\n      this.setState({ open: false });\n   };\n   \n   handleChange = (event) => {\n      this.setState({\n         [event.target.name]: event.target.value,\n      });\n   }\n\n   selectImage = (event) => {\n      if (event.target.files[0]) {\n         const targetCsv = event.target.files[0]\n         console.log(event.target.files)\n         this.setState({csvFile: targetCsv,})\n      }\n   }\n\n   uploadCsv = () => {\n      console.log(this.state);\n      if(this.state.csvFile === null){\n         swal( \"Wait\", \"Please select a csv file locally from your computer...\", \"warning\");\n         return\n      }\n      //ref has a function called put\n      const uploadTask = storage.ref(`employer_files/${this.state.csvFile.name}`).put(this.state.csvFile);\n      //uploadTask.on('state_changed', progess, error, complete) //this is the format of the parameters, they are functions;\n      uploadTask.on('state_changed',\n      (snapshot) => {\n         //progress function parameter\n         const thisProgess = Math.round((snapshot.bytesTransferred / snapshot.totalBytes * 100)); //snapshot has a property of bytesTransferred\n         this.setState({progress: thisProgess});\n      },\n      (error) => {\n         //error function parameter\n         console.log(`The error:, `, error)\n      },\n      (complete) => {\n         //complete function parameter\n         storage.ref('employer_files').child(this.state.csvFile.name).getDownloadURL().then(thisUrl => {\n            console.log(thisUrl);\n            swal(\"Uploaded!\", \"File successfully uploaded!\", \"success\");\n            this.setState({\n               csv_url: thisUrl,\n               disableButton: false\n            });\n            this.props.dispatch({type: 'UPDATE_CSV_URL', payload: this.state})\n         })\n         .then((result)=>{\n            this.updateUrl()\n         })\n      });\n   }\n   \n   updateUrl = () => {\n      this.props.dispatch({type: 'EXTRACT_EMPLOYEE_DATA', payload: this.props.user.company_id})\n      this.props.history.push('/data-table')\n      this.setState(newState);\n   }\n\n   render() {\n    \n      const {classes} = this.props;\n      console.log(this.state);\n      \n      // let confirmButton = this.state.disableButton === true ?\n      // <Button type=\"submit\" className={classes.dialogConfirmBtn} variant=\"contained\" disabled>Confirm</Button>\n      // : <Button onClick={this.updateUrl} className={classes.dialogConfirmBtn} variant=\"contained\">Confirm</Button>\n\n      return (\n         <section>\n            <div>\n               <Button onClick={this.handleOpenClick} className={classes.csvButton} variant=\"contained\">Upload csv</Button>\n            </div>\n            <Dialog\n               open={this.state.open}\n               onClose={this.handleCloseClick}\n               aria-labelledby=\"dialog-title\"\n            >\n            <DialogTitle id=\"dialog-title\">Upload a .csv file</DialogTitle>\n            <DialogContent>\n               <DialogContentText>1. Click the \"Choose File\" button below.<br/>2. Choose the .csv file from your computer that has your employees' data.<br/>3. Click the \"Upload\" button at the bottom to load your data.<br/>4. You will be brought to a new page where you will organize your data.</DialogContentText>\n                  <br/>\n                     <FormGroup>\n                        <FormControl >\n                           <input  type=\"file\" accept=\".csv\" onChange={this.selectImage}/>\n                           <br/>\n                           {/* <div>\n                              <img src={this.state.csv_url || 'https://via.placeholder.com/280x200'} alt=\"Upload image\" height=\"280\" width=\"200\"></img>\n                           </div> */}\n                        </FormControl>\n                     </FormGroup>\n                  \n            </DialogContent>\n            <DialogActions>\n               {/* {confirmButton} */}\n               <Button onClick={this.uploadCsv} className={classes.csvButton}>Upload</Button>\n               <Button onClick={this.handleCloseClick} className={classes.dialogCancelBtn} variant=\"contained\">Cancel</Button>\n            </DialogActions>\n         </Dialog>\n         </section>\n      );\n   }\n}\n\n\nconst mapStateToProps = reduxState => {\n  return reduxState\n};\n\nexport default withRouter(connect(mapStateToProps)(withStyles(styling)(FileUpload)));","// Vendors\nimport React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n// Styles\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport ResponseIcon from '@material-ui/icons/Feedback';\nimport WaitingIcon from '@material-ui/icons/AccessTime';\nimport DownloadIcon from '@material-ui/icons/Archive';\nimport Paper from '@material-ui/core/Paper';\n// Components\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport UploadButton from '../Employer/FileUpload';\n\nconst styling = theme => ({\n   alignCenter: {\n      textAlign: 'center'\n   },\n   tableFormat: {\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      marginBottom: 50,\n      maxWidth: 1000\n   },\n   marginRight: {\n      marginRight: 5\n   },\n   csvButton: {\n      background: 'royalblue',\n      color: 'white',\n      textWeight: 'bold',\n      textTransform: 'uppercase'\n   },\n   //styling for employer dashboard\n   root: {\n      marginTop: theme.spacing.unit * 3,\n      marginLeft: '20%',\n      marginRight: '20%',\n      padding: 10,\n      overflowX: 'auto',\n   },\n});\n\nclass EmployerDashboard extends Component {\n  \n   componentDidMount(){\n      this.props.dispatch({type: 'GET_DEAL_ID', payload:this.props.user.company_id})\n      this.props.dispatch({type:'GET_QUOTES', payload:this.props.user.company_id})\n   }\n\n   render(){\n      \n      const {classes} = this.props;\n      let tableHeadInsert;\n      let tableBodyInsert;\n      \n      if(this.props.quotesReducer.length === 0){\n         let tableHeadInsert = <br></br>\n         let tableBodyInsert = <p>You currently have no quotes</p>\n      }\n      else {\n         tableHeadInsert =\n            <TableRow>\n               <TableCell className={classes.alignCenter}>Status</TableCell>\n               <TableCell className={classes.alignCenter}>Provider</TableCell>\n               <TableCell className={classes.alignCenter}>Message</TableCell>\n               <TableCell className={classes.alignCenter}>Download File From Provider</TableCell>\n            </TableRow>\n\n         tableBodyInsert = this.props && this.props.quotesReducer.length > 0 ?\n            this.props.quotesReducer.map(quote => {\n               if(quote.decision_complete === true){\n                  return <TableRow key={quote.quote_id}>\n                     <TableCell className={classes.alignCenter}><ResponseIcon className={classes.marginRight}/>Provider has responded</TableCell>\n                     <TableCell className={classes.alignCenter}>{quote.provider}</TableCell>\n                     <TableCell className={classes.alignCenter}>{quote.provider_response_message}</TableCell>\n                     <TableCell className={classes.alignCenter} onClick={()=> window.open(quote.provider_response_file_location, \"_blank\")}><DownloadIcon/></TableCell>\n                  </TableRow>\n               }\n               else {\n                  return <TableRow key={quote.quote_id} >\n                     <TableCell className={classes.alignCenter}><WaitingIcon/> Awaiting response</TableCell>\n                     <TableCell className={classes.alignCenter}>{quote.provider}</TableCell>\n                     <TableCell className={classes.alignCenter}>-</TableCell>\n                     <TableCell className={classes.alignCenter}>-</TableCell>\n                  </TableRow>\n               }\n                    \n            }) : <span></span>\n      }\n      return(\n         \n         <div>\n            {/* paper to put employer dashboard on a card */}\n            <Paper className={classes.root} elevation={15}>\n               <div>\n                  <h1 className={classes.alignCenter}>Dashboard</h1>\n               </div>\n               <Table className={classes.tableFormat}>\n                  <TableHead>\n                     {tableHeadInsert}\n                  </TableHead>  \n                  <TableBody >\n                     {tableBodyInsert}\n                  </TableBody>\n               </Table>\n               <div className={classes.alignCenter}>\n                  <p>After your first upload, upload another csv ONLY if requested by a broker or provider:</p>\n                  <UploadButton deal_id={this.props.deals[0]}/>\n               </div>\n            </Paper>\n         </div>\n      );\n   }\n}\n\nconst mapStateToProps = state => ({\n   deals: state.deals,\n   quotesReducer: state.quotesReducer.employerQuotesReducer,\n   user: state.user\n});\n\nexport default connect(mapStateToProps)(withStyles(styling)(EmployerDashboard));","// Vendors\nimport React, {Component} from 'react';\nimport { connect } from 'react-redux';\n// Styles\nimport { withStyles } from '@material-ui/core/styles';\n// import ReactDOM from 'react-dom';\n// import { withStyles } from '@material-ui/core/styles';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n// Material UI styling and theme setup (CSS)\nconst styling = theme => ({\n   root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n   },\n   formControl: {\n      margin: theme.spacing.unit,\n      minWidth: 120,\n   },\n   selectEmpty: {\n      marginTop: theme.spacing.unit * 2,\n   },\n   alignCenter: {\n      textAlign: 'center'\n   },\n});\n\nclass ColumnDropdown extends Component {\n\n   // Creates local state to store the user's currently selected option\n   // This is used to populate the dropdown when it's not in use- showing the choice the user selected\n   state = {\n      label: '',\n    };\n    \n    // This function takes in the option from the dropdown menu that the user picked and sets it to local state\n    // as well as sends the user's choice to the columns reducer stored in redux for later\n    handleChange = (name) => event => {\n      this.props.dispatch({type: 'SET_COLUMNS', payload: [this.props.index, event.target.value]})\n      this.props.renderFunction();\n      this.setState({ label: event.target.value });\n    };\n   \n   render(){\n     \n      return(\n         \n         <div>\n\n            <FormControl  variant=\"filled\" className={this.props.formControl}>\n               <InputLabel htmlFor=\"filled-label-native-simple\"></InputLabel>\n               <Select\n                  \n                  native\n                  value={this.state.label}\n                  onChange={this.handleChange()}\n                  input={<FilledInput name=\"label\" id=\"filled-label-native-simple\" />}\n               >\n                  {/* These options are hard coded (manually written) for this version- based on scope document requirements. */}\n                  <option key='default' disabled={true} value=\"\">Select Column Label</option>\n                  <option value='employer_supplied_unique_id'>Employee's Unique ID</option>\n                  <option value='date_of_birth'>Employee's Date of Birth</option>\n                  <option value='date_of_hire'>Employee's Date of Hire</option>\n                  <option value='union'>Union or Non-Union</option>\n                  <option value='salary_per_year'>Employee's Salary</option>\n                  <option value='gender'>Employee's Gender</option>\n                  <option value='status'>Employment Status (retired, active, LOA, etc.)</option>\n                  <option value='state'>Employee's State of Residence</option>\n                  <option value='role'>Employee's Role</option>\n                  <option value='employer_supplied_company_code'>Company Code</option>\n                  <option value='other'>Other</option>\n               </Select>\n            </FormControl>\n         </div>\n      );\n   }\n}\n\nconst mapStateToProps = state => ({\n   columnsReducer: state.columnsReducer\n});\n\nexport default connect(mapStateToProps)(withStyles(styling)(ColumnDropdown));","// Vendors\nimport React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport {storage} from '../../firebase/config'\nimport swal from 'sweetalert';\n// Styles\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n// Components\nimport ColumnDropdown from './ColumnDropdown'\n\nconst styling = theme => ({\n   alignCenter: {\n      textAlign: 'center'\n   },\n   tableFormat: {\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      marginBottom: 50,\n      maxWidth: 1000\n   },\n   width: {\n      width: 570,\n      marginLeft: 'auto',\n      marginRight: 'auto'\n   },\n   //styling for employer column page\n   columnPage: {\n      marginTop: theme.spacing.unit * 3,\n      marginLeft: '2%',\n      marginRight: '2%',\n      padding: 10,\n      overflowX: 'auto',\n   },\n   //styling for employer columns\n   columns: {\n      marginTop: theme.spacing.unit * 3,\n      marginLeft: '1%',\n      marginRight: '1%',\n      padding: 10,\n      overflowX: 'auto',\n   },\n   //styling for confirm button\n   confirmBtn: {\n      background: 'green',\n      color: 'white',\n      textWeight: 'bold',\n      textTransform: 'uppercase',\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      marginTop: 30\n   }\n});\n\nclass EmployeeDataTable extends Component {\n\n   state = {\n      csv_url: null,\n      deal_id: null,\n   }\n\n   componentDidMount(){\n      this.props.dispatch({type: 'GET_DEAL_ID', payload:this.props.user.company_id})\n   }\n   \n   // triggered after each dropdown selction in the child component, it is re-rendering this component\n   renderFunction = () => {\n      this.setState({})\n   }\n\n   // converts the employer's original csv into a new one, then uploads the new csv to Firebase storage\n   confirmColumns = () => {\n      if(this.props.columnsReducer.includes('choose')){\n         swal(\"Wait...\", \"There is at least 1 column that needs to be chosen\", \"warning\")\n         return\n      }\n      \n      let indexesToRemove = []\n      \n      // loops through the columnsReducer and searches for indexes with the value of 'other' (i.e. the indexes that need to be removed)\n      for(let i = 0; i < this.props.columnsReducer.length; i++){\n         if(this.props.columnsReducer[i] === 'other'){\n            indexesToRemove.push(i)\n         }\n      }\n      \n      let empReducer = this.props.employeesReducer[0] // an array of arrays, each containing an individual employee's data\n      \n      // loops through each array inside of empReducer and removes the unwanted indexes, which are indicated by the values of the\n      // indexesToRemove array, thus the nested loop iterates through the indexesToRemove array and splices accordingly\n      for(let array of empReducer){\n         for(var i = indexesToRemove.length-1; i >= 0; i--){\n            array.splice(indexesToRemove[i], 1)\n         }\n      }\n\n      let newCsvBody = ''\n      \n      // now that every array within the empReducer is modified accordingly, the contents of each array needs to become one long string\n      // this long string, newCsvBody, will be used in the creation of a new csv file\n      // the nested loop is tasked with putting quotations around each array element followed by a comma so that the csv format is retained\n      for(let array of empReducer){\n         let arrayToString = ''\n         for(let i = 0; i < array.length; i++){\n            arrayToString += '\"' + array[i] + '\",'\n         }\n         newCsvBody += arrayToString + '\\n'\n      }\n      \n      let finalColumnsString = '' // newCsvBody and a modified version of finalColumnsString will be concatenated and stored in finalCsvString\n      let finalCsvString = ''     \n      \n      // loop through the columnsReducer to build a string that will eventually be the new first line of our originalCsvString\n      for(let category of this.props.columnsReducer){\n         if(category === 'other' || category === 'choose'){\n            console.log('No push')\n         }\n         else {\n            finalColumnsString += category + ','\n         }\n      }\n      \n      let finalColumnsString2 = finalColumnsString.slice(0, finalColumnsString.length-1) //removes the comma at the end of finalColumnsString\n      finalCsvString = finalColumnsString2 + '\\n' + newCsvBody\n      let contentType = 'text/csv';\n      let blobObject = new Blob([finalCsvString], {type: contentType});\n         \n      //ref has a method called put\n      const uploadTask = storage.ref(`updated_employer_files/new_csv_${this.props.user.company_id}.csv`).put(blobObject);\n      \n      //uploadTask.on('state_changed', progess, error, complete) //this is the format of the parameters, they are functions;\n      uploadTask.on('state_changed',\n      (snapshot) => {\n         //the progress function parameter\n      },\n      (error) => {\n         //the error function parameter\n         console.log(`The error:, `, error)\n      },\n      (complete) => {\n         //the complete function parameter\n         storage.ref('updated_employer_files').child(`new_csv_${this.props.user.company_id}.csv`).getDownloadURL().then(thisUrl => {\n            console.log(thisUrl);\n            swal(\"Uploaded!\", \"File successfully uploaded!\", \"success\");\n            this.setState({\n               csv_url: thisUrl,\n               deal_id: this.props.deals[0].deal_id\n            });\n            this.props.dispatch({type: 'UPDATE_CSV_URL', payload: this.state})\n            this.props.history.push('/home')\n         })\n      });\n    }\n   \n   render(){\n\n      const {classes} = this.props\n      let preTableInsert;\n      let tableHeadInsert;\n      let tableBodyInsert1;\n      let tableBodyInsert2;\n      let confirmButton;\n      let columnsArr = []\n      if(this.props.employeesReducer.length === 0){\n         preTableInsert = <span></span>\n         tableHeadInsert = <br></br>\n         tableBodyInsert1 = <p className={classes.alignCenter}>Please navigate to the home page by clicking this <a href='/home'>LINK</a> and re-upload your csv file...</p> \n         confirmButton = <span></span>\n      }\n      if (this.props && this.props.employeesReducer.length > 0 && this.props.columnsReducer.length === 0){\n         console.log(this.props.employeesReducer[0].length)\n         this.props.dispatch({type:'SET_COLUMNS', payload: this.props.employeesReducer[0][0].length})\n      }\n      if(this.props && this.props.employeesReducer.length > 0 && this.props.columnsReducer.length > 0){\n         \n         preTableInsert = <div className={`${classes.width}`}>\n            <p>1. This is only a small sample of the data you have uploaded.</p>\n            <p>2. Please make sure each column dropdown menu matches the data it belongs to below.</p>\n            <p>3. Click the \"Confirm\" button when all columns are complete to send your data.</p>\n         </div>\n         \n         tableHeadInsert = this.props.employeesReducer[0][0].map((column, index) =>\n            <TableCell style={{padding: 5,}}><ColumnDropdown index={index} columnRowLength={null} renderFunction={this.renderFunction}/></TableCell>)\n         \n         tableBodyInsert1 = <TableRow style={{backgroundColor: '#6B6B6B',}}>\n            {this.props.employeesReducer[1][0].map(data => \n               <TableCell style={{padding: 5,color: '#FFFFFF',}}>{data}</TableCell>\n            )}\n         </TableRow>\n\n         for(let i = 1; columnsArr.length < 5; i++) {\n            columnsArr.push(this.props.employeesReducer[0][i])\n         }\n\n         tableBodyInsert2 = columnsArr.map(employee =>\n            <TableRow style={{backgroundColor:'#828282',}}>\n               {employee.map(data => \n                  <TableCell style={{padding: 5,color: '#FFFFFF',}}>{data}</TableCell>\n               )}\n            </TableRow>);\n         \n         confirmButton = <div className={classes.alignCenter}>\n               <Button className={classes.confirmBtn} onClick={this.confirmColumns}>Confirm</Button>\n            </div>\n      }\n      \n      return(\n         <div>\n            <Paper className={classes.columnPage} elevation={15}>\n               <h1>Check Your Data</h1>\n               {preTableInsert}\n               <Paper className={classes.columns} elevation={2}>\n                  <Table>\n                     <TableHead>\n                        <TableRow>\n                           {tableHeadInsert}\n                        </TableRow>\n                     </TableHead>\n                     <TableBody>\n                        \n                        {tableBodyInsert1}\n                        {tableBodyInsert2}\n                     </TableBody>\n                  </Table>\n               </Paper>\n            </Paper>\n            {confirmButton}\n         </div>\n      );\n   }\n}\n\nconst mapStateToProps = state => ({\n   deals: state.deals,\n   employeesReducer: state.employeesReducer,\n   user: state.user,\n   columnsReducer: state.columnsReducer\n});\n\nexport default connect(mapStateToProps)(withStyles(styling)(EmployeeDataTable));","// Vendors\nimport React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {storage} from '../../firebase/config';\nimport swal from 'sweetalert';\n// Styles\nimport { withStyles } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Send from '@material-ui/icons/Send';\n\n// Material UI theme and component styling (CSS)\nconst styling = theme => ({\n   root: {\n      width: '100%',\n      marginTop: theme.spacing.unit * 3,\n      overflowX: 'auto',\n    },\n   fileButton: {\n      background: `#1a3d50`,\n      color: 'white',\n      margin: theme.spacing.unit,\n   },\n   dialogCancelBtn: {\n      background: 'firebrick',\n      color: 'white',\n      textWeight: 'bold',\n      textTransform: 'uppercase',\n      fontSize: 12\n   },\n   dialogConfirmBtn: {\n      background: 'green',\n      color: 'white',\n      textWeight: 'bold',\n      textTransform: 'uppercase',\n      fontSize: 12\n   }\n})\n\n// A template object to use for resetting state\nconst newState = {\n   quote_id: null,\n   file: null,\n   file_url: null,\n   open: false,\n   disableButton: true,\n   message: '',\n}\n\nclass UploadQuoteButton extends Component {\n\n   // Sets state to the template object above\n   state = newState;\n\n   // Updates State to include the quote's ID for updates\n   componentDidMount = () => {\n      this.setState({\n         quote_id: this.props.quote_id,\n      });\n   };\n\n   // Handles the popup window\n   handleOpenClick = () => {\n      this.setState({ open: true });\n   };\n  \n   // Handles the popup window\n   handleCloseClick = () => {\n      this.setState({ open: false });\n   };\n   \n   // This function takes what the user types in the \"Provider Response Form\" \n   // and sets it with local state so we can use the information to export later\n   handleChange = (event) => {\n      this.setState({\n         [event.target.name]: event.target.value,\n      });\n   }\n\n   // Handles the \"quote file\" upload and sets it inside local state\n   selectImage = (event) => {\n      if (event.target.files[0]) {\n         const targetFile = event.target.files[0]\n         this.setState({file: targetFile,})\n      }\n   }\n\n   // This function takes the data that the user has input and checks if all the required fields are filled.\n   // If all the required fields are filled, this function will upload the file to the FireBase database\n   // and add that URL (link) along with the Provider's message to the database via calling the updateUrl function below.\n   uploadFile = () => {\n      this.setState({\n         quote_id: this.props.quote_id,\n      });\n      if(this.state.file === null){\n         swal(\"WARNING!\", \"Please select a file locally from your computer!\", \"warning\");\n         return\n      }\n      // This creates the URL that the file will be stored at on FireBase\n      const uploadTask = storage.ref(`provider_files/${this.props.reduxState.user.company_id}/${this.props.quote_id}/${this.state.file.name}`).put(this.state.file);\n      uploadTask.on('state_changed',\n         (snapshot) => {\n         },\n         (error) => {\n            console.log(`The error:, `, error)\n         },\n         (complete) => {\n            // This triggers when the URL is successfully created, and responds back with the complete URL labeled here as \"thisUrl\"\n            storage.ref(`provider_files/${this.props.reduxState.user.company_id}/${this.props.quote_id}`).child(this.state.file.name).getDownloadURL().then(thisUrl => {\n               swal(\"Great job!\", \"File successfully uploaded!\", \"success\");\n               // Sets local state to include the new file URL\n               this.setState({\n                  file_url: thisUrl,\n                  disableButton: false\n               });\n            })\n            .then((result) => {\n               this.updateUrl();\n            })\n            .catch((error) => {\n               console.log('Error with uploadFile function after complete');\n            });\n         } // end (complete)\n      ) // end uploadTask.on\n   }\n   \n   // This function takes the data within local state (the provider's response and/or quote)\n   // and dispatches the data as a payload to the quotesSaga.js file.\n   updateUrl = () => {\n      this.props.dispatch({type: 'UPDATE_QUOTE_URL', payload: this.state})\n      this.setState(newState);\n   }\n\n   render() {\n    \n      const {classes} = this.props;\n      \n      return (\n         <section>\n            <div>\n               <Button onClick={this.handleOpenClick} className={classes.fileButton} variant=\"contained\"><Send /> Send Quote</Button>\n            </div>\n            <Dialog\n               open={this.state.open}\n               onClose={this.handleCloseClick}\n               aria-labelledby=\"dialog-title\"\n            >\n            <DialogTitle id=\"dialog-title\">Send a Quote to {this.props.employer}.</DialogTitle>\n            <DialogContent>\n               <DialogContentText>1. Click the \"Choose File\" button to upload your document.<br/>2. Enter your message.<br/>3. Click the Send button.\n               </DialogContentText>\n                     <FormGroup>\n                        <FormControl >\n                           <br/>\n                           <label >File:</label>\n                           <input className=\"fileButton\" type=\"file\" onChange={this.selectImage}/>\n                           <br/>\n                           <label >Your Message:</label>\n                           <input rows=\"6\" type='textarea' id=\"message\" placeholder=\"\" value={this.state.message} name=\"message\" onChange={this.handleChange} />\n                           <br/>\n                        </FormControl>\n                     </FormGroup>\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={this.uploadFile} className={classes.fileButton}>Send</Button>\n               <Button onClick={this.handleCloseClick} className={classes.dialogCancelBtn} variant=\"contained\">Cancel</Button>\n            </DialogActions>\n         </Dialog>\n         </section>\n      );\n   }\n}\n\n\nconst mapreduxStateToProps = reduxState => ({\n  reduxState\n});\n\nexport default connect(mapreduxStateToProps)(withStyles(styling)(UploadQuoteButton));","// Vendors\nimport React from 'react';\nimport PropTypes from 'prop-types';\n// Components\nimport UploadQuoteButton from './UploadQuoteButton';\n// Styles\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport CloudDownload from '@material-ui/icons/CloudDownload';\nimport CheckCircle from '@material-ui/icons/CheckCircle';\nimport NotInterested from '@material-ui/icons/NotInterested';\n\n// Material UI theme and styling\nconst theme2 = createMuiTheme({\n  palette: {\n    primary: {\n        main: `#1a3d50`,\n      },\n    secondary: {\n      main: `#efbf42`,\n    },\n  },\n });\n\nconst CustomTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: `#1a3d50`,\n    color: theme.palette.common.white,\n    // text: center,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n  row: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.background.default,\n    },\n  },\n  button: {\n    margin: theme.spacing.unit,\n  },\n  input: {\n    display: 'none',\n  },\n});\n\n// This function checks to see if a response has been sent to the Employer.\nfunction statusMath(status) {\n  // If the Provider has sent a response, add a checkmark icon to the table.\n  if (status === true) {\n      return(\n          <CheckCircle />\n      )\n  }\n  // If the Provider has not responded, add a \"no\" symbol icon to the table.\n  else{\n      return(\n          <NotInterested />\n      )\n  }    \n}\n\n\nfunction CustomizedTable(props) {\n  const { classes } = props;\n\n  return (\n    <MuiThemeProvider theme={theme2}>\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <CustomTableCell>Employer</CustomTableCell>\n            <CustomTableCell>Broker</CustomTableCell>\n            <CustomTableCell>Download Employer's Data</CustomTableCell>\n            <CustomTableCell>Response Status</CustomTableCell>\n            <CustomTableCell>Respond</CustomTableCell>\n          </TableRow>\n        </TableHead>\n        {/* Map through the quotes that are associated with the logged-in provider.\n        For each quote, add a row to the dashboard table for organization. */}\n        <TableBody>\n          {props.quote.map(quote => {\n            return (\n              <TableRow className={classes.row} key={quote.quote_id}>\n                <CustomTableCell component=\"th\" scope=\"quote\">\n                  {quote.employer}\n                </CustomTableCell>\n                <CustomTableCell>{quote.broker}</CustomTableCell>\n                <CustomTableCell className=\"icon\" onClick={()=> window.open(quote.csv_url, \"_blank\")}><CloudDownload /></CustomTableCell>\n                <CustomTableCell>{statusMath(quote.decision_complete)}</CustomTableCell>\n                <CustomTableCell>\n                  <UploadQuoteButton quote_id={quote.quote_id} employer={quote.employer}/>\n                </CustomTableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </Paper>\n    </MuiThemeProvider>\n  );\n}\n\nCustomizedTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n// ContainedButtons.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n\nexport default withStyles(styles)(CustomizedTable);","// Vendors\nimport React, { Component } from 'react';\nimport {connect} from 'react-redux';\n// Components\nimport CustomizedTable from './CustomizedTable';\n// styling\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\n\n// Material UI theme and component styling (CSS)\nconst styles = theme => ({\n  root: {\n    marginTop: theme.spacing.unit * 3,\n    marginLeft: 100,\n    marginRight: 100,\n    overflowX: 'auto',\n  },\n});\n\nclass ProviderDashboard extends Component {\n\n  fetchQuotes = () => {\n    // Dispatch action to fetch the Quotes from the server\n    this.props.dispatch( { type: 'FETCH_QUOTES' } );\n  }\n\n  // This renders the Quotes right away\n  componentDidMount() {\n      this.fetchQuotes();\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <Paper className={classes.root} elevation={15}>\n          <h1>Your Dashboard</h1>\n          <CustomizedTable quote={this.props.reduxState.quotesReducer.providerQuotesReducer}/>\n        </Paper>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = reduxState => ({reduxState});\n\nexport default withStyles(styles)(connect(mapStateToProps)(ProviderDashboard));","import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport swal from 'sweetalert';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#1a3d50',\n    },\n    secondary: {\n      main: '#efbf42',\n    },\n  },\n});\n\n\nconst addDemoData = () => {\n\n  axios.post('api/demoData', ['addDemoData'])\n    .then((res) => {\n      swal(\"Demonstration Data Added\");\n    })\n    .catch((error) => {\n      swal(\"Error adding Demonstration Data\");\n    })\n};\n\nconst deleteDemoData = () => {\n  axios.post('api/demoData/deleteData', ['deleteDemoData'])\n    .then((res) => {\n      swal(\"Demonstration Data Deleted\");\n    })\n    .catch((error) => {\n      swal(\"Error Deleting Demonstration Data\");\n    });\n};\n\n\nconst addOnlyTables = () => {\n  axios.post('api/demoData/addOnlyTables', ['addOnlyTables'])\n    .then((res) => {\n      swal(\"Ready to start from scratch\");\n    })\n    .catch((error) => {\n      swal(\"Error starting from scratch\");\n    });\n};\n\nconst AboutPage = () => (\n  <MuiThemeProvider theme={theme}>\n  <br/>\n    <div align=\"center\">\n      <Button variant=\"contained\" color=\"primary\"\n        onClick={() => addDemoData()}\n      >ADD DEMO DATA  </Button>\n      <span>  </span>\n      <Button variant=\"contained\" color=\"primary\"\n        onClick={() => deleteDemoData()}\n      >DELETE DEMO DATA  </Button>\n      <span>  </span>\n      <Button variant=\"contained\" color=\"primary\"\n        onClick={() => addOnlyTables()}\n      >START FROM SCRATCH (Delete demo data first)  </Button>\n    </div>\n  </MuiThemeProvider>\n);\n\nexport default AboutPage;\n","// Vendors\nimport React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport {connect} from 'react-redux';\n// Components\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n// Component Pages\nimport AdminDashboard from '../Admin/AdminDashboard';\nimport BrokerDashboard from '../Broker/BrokerDashboard';\nimport EmployerDashboard from '../Employer/EmployerDashboard';\nimport EmployeeDataTable from '../Employer/EmployeeDataTable';\nimport ProviderDashboard from '../Provider/ProviderDashboard';\nimport LoginPage from '../LoginPage/LoginPage';\nimport AboutPage from '../AboutPage/AboutPage';\n\n// Styles\nimport './App.css';\n\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n            <Route\n              exact\n              path=\"/about\"\n              component={AboutPage}\n            />\n            <Route\n              exact\n              path=\"/\"\n              component={LoginPage}\n            />\n            <Route\n              exact\n              path=\"/brokerdashboard\"\n              component={BrokerDashboard}\n              />\n            <Route\n              exact\n              path=\"/dashboard\"\n              component={ProviderDashboard}\n            />\n            <Route\n              exact\n              path=\"/data-table\"\n              component={EmployeeDataTable}\n            />\n            \n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/home\"\n              // the component the admin sees when they log in with authorization_id = 1\n              component={AdminDashboard}\n              // the component the provider sees when they log in  with authorization_id = 2\n              component2={EmployerDashboard}\n              // the component the broker sees when they log in  with authorization_id = 3\n              component3={BrokerDashboard}\n              // the component the employer sees when they log in  with authorization_id = 4\n              component4={ProviderDashboard}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            {/* <ProtectedRoute\n              exact\n              path=\"/info\"\n              component={InfoPage}\n            /> */}\n            \n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n  )}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}